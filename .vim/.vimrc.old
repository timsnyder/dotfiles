" VIM Configuration File
" Author:   Tim Snyder <tim.snyder@amd.com>
" Modeline: vim:fdc=2:fml=1:fdm=marker:fcs=fold\:\ 
" Last Modified: tsnyder 10-Aug-05 15:37 
" Note: If you are totally lost with folding turned on, type 'zi' in Normal mode
"	or do Tools->Folding->Enable/Disable Folding in GUI menus
let loaded_diffim = 1
"    TODO List	{{{1
"	* Fix visual enclosure mappings to not move left for closing unless characters were added on that line
"	* Set nomodifiable for *.rpt, *.log, *.???  (actually set nowrite)
"	* Autoformat paragraphs in indent/mail.vim mode
"	* Add command to set linewrap to the currently longest line, (preserve other people's formatting)
"	    * Set comments to wrap like the rest of the text (same as above?)
"	* Make the foldcolumn non-zero only if there are folds in the text... {{{2
"	    * Loop through buffer upto a certain number of lines, if you find a foldlevel("!") > 0 set it to
"	    * 2 and break otherwise set to 0
"	* Figure out if there is a command to upsize and downsize font to effectively zoom in and {{{2
"	  out?
"	* Add Words to ToDo syntax globally	{{{2
"	    * ToDo without case sensitivity
"	    * Any !WORD! blah blah blak !WORD! combination with paramaterized number of !
"						}}}
"           TODO should probably move this to ~tsnyder/.vim/after/ftplugin/vim.vim    {{{2
"            im:fdc=2:fml=1:fdm=marker:foldtext=substitute(substitute(foldtext(),'^.*\:','','g'),'".*','',''):fcs=fold\:\ :hl=f-
"           set foldcolum=2
"           set foldminlines=1
"           set foldmethod=marker
"           set foldtext="the normal junk with marker commentstring stripped off and line count stripped off"
"           set fcs="fill to end of closed fold with spaces"
"           set hl="turn off highlighting of closed folds
"
" DONE {{{2 
"	* Make SplitDrop() check to see if the current window actually has a buffer loaded in it and
"	  that it isn't "no file" - tsnyder 25-Jul-05 10:07
"}}}

" VIMRC Parameters		    {{{1
" ================
let s:UserPerlBin='/home/tsnyder/src/perl'

"to define different diff program for 'diff' mode after executing :DiffOptions, 
"set this variable
"let g:diff_path = 'diff'

" VIM Syntax Coloring Plugin Parameters	    {{{1
" =====================================
let perl_include_pod		    = 1
let perl_want_scope_in_variables    = 1
let perl_extended_vars		    = 1
let perl_fold			    = 1
let perl_fold_blocks		    = 1

" VIM Plugins			    {{{1
" ============
" Source global plugins that are NOT in $VIMRUNTIME/plugin for whatever reason

" Don't source any of the default plugins, Explorer, ToHtml, etc...
" set noloadplugins

"Define User Command :Man that will open manpages in a new window
runtime! ftplugin/man.vim

" VIM Option Initialization	    {{{1
" =========================

" Coloring			    {{{2
" ========
 
" Probably could move this into a color scheme at some point....

" Make diff coloring the same as tkdiff in the GUI	{{{3
highlight DiffAdd	guibg=PaleGreen	 guifg=Black gui=bold
highlight DiffChange	guibg=LightSteelBlue guifg=Black
highlight DiffDelete	guibg=Tomato	 guifg=Black gui=bold
highlight DiffText	guibg=DodgerBlue guifg=Black gui=bold


"force xterm to only use 8 colors   {{{3
"needs to be done before turning syntax on if done at all
"I don't think I need it - tsnyder 22-Jul-05
"The termcap entry for xterm is set right on my current system
"but if you set it higher, things do get all crazy
"I think that you could set TERM to xterm-color and maybe get better behavior
"I don't care too much though, I normally use the gui...
if &term =~ "xterm"
    if has("terminfo")
	set t_Co=8
	set t_Sf=[3%p1%dm
	set t_Sb=[4%p1%dm
    else
  	set t_Co=8
  	set t_Sf=[3%dm
  	set t_Sb=[4%dm
    endif
endif

 
" Turn on syntax coloring, filetype plugins and filetype intenting {{{3
syntax enable	    "subtle difference between syntax on and syntax enable - see :help sy
filetype plugin indent on  

" Create a syntax group for things that I always want to add to Todo {{{3
"match Todo /?{3}.*?{3}/
"match Todo /ToDo/
	    "\|\<UserTodo\>\|\<Todo\>\|\<ToDo\>\|\<NOTE\>\|\<Note\>/
"syn region UserTodo start="???" end="???"
"syn keyword UserTodo Todo ToDo NOTE Note
"hi link UserTodo Todo

" Create a syntax group for things that I always want to add to Todo {{{3
"match Underlined /!\{3}.*!\{3}/
"syn region UserUlined start="!!!" end="!!!"
"hi link UserUlined Underlined
 
" Always use reverse white on black for gui mode {{{3
highlight Normal     guibg=Black guifg=WhiteSmoke 
set background=dark

" Use something 'off-white' for the status bar so I don't end up with horizontal lines burned in my retnas ;)  {{{3
" Remember 'reverse' is set by default for both StatusLine highlight groups
highlight StatusLine     guibg=Black guifg=#b0b0b0
highlight VertSplit      guibg=Black guifg=#b0b0b0
highlight StatusLineNC   guibg=Black guifg=#858585


"Make the Folded Highlighting easier to see than the default cyan on light grey {{{3
"mainly concerned about GUI, it's cyan on black in cterm
highlight Folded     guibg=Black guifg=green
highlight FoldColumn guibg=Black guifg=green

"}}}

" Case Sensitivity in Searches	    {{{2
" ============================

set ignorecase
set smartcase


" Depricated VI Opts		{{{2
" ==================
"these first three are Old Schooly Unix Vi options that were set when I inherited this .vimrc 
"I don't have a clue what they do in real Vi but the vim help says they don't do anything in vim.
" - tsnyder 22-Jul-05
set autoprint 
set optimize
set redraw

" Format and Appearance		    {{{2
" =====================

set formatoptions=tcqorb "tried 'a' but it sucks lines into end of line comments added 'ab' flags - tsnyder 22-Jul-05
set guioptions=agimrp	"added pointer callback preferance 'p' to see if that fixes focus issues with fluxbox - tsnyder 22-Jul-05 01:1
set textwidth=100 "added - tsnyder 22-Jul-05

"Let vim relax a bit when running scripts and macros, also cuts down on the flicker factor
set lazyredraw

"Don't wrap lines that are longer than the screen
set nowrap
"if I do decide to wrap, then make the lines brake at spaces and otherplaces that make sense
set linebreak

"in insert mode, allow backspacing lines together and initial indentation
set backspace=indent,eol

" Folding			{{{2
" =======

"Default to syntactic folding instead of manual
set foldmethod=syntax

"always leave folds smaller than &foldminlines open
"set foldminlines=5

"make closed folds not be filled with '-' because that makes folded text hard to read
"Note the <Space> that is escaped for fold:
set fillchars=fold:\ 

" If syntax is detected, add column for folding, otherwise, don't, prevents black folding column on
" cterm background
if exists("b:current_syntax")
    set foldcolumn=2
endif

" Mouse				    {{{2
" =====
"enable mouse for xterm
set mouse=a

" Status Bar			{{{2
" ==========
 
"Always have a status bar at the bottom even if there is just one window
set laststatus=2
"put position information in the statusline
set ruler
"allow windows to be squeezed down to their statusbar
set winminheight=0

" Tabbing and Indentation	    {{{2
" =======================

set smarttab
set softtabstop=3
set shiftwidth=3

set autoindent
set smartindent


" Window Title			{{{2
" ============
set title
set titlestring=%t%(\ %M%)%(\ (%{expand(\"%:~:.:h\")})%)%(\ %a%)
				"}}}
				
" User Functions		{{{1
" ==============
 
function! VarExists(var, val, ...)			"{{{2
    if exists(a:var) 
	return a:val 
    elseif a:0 != 0
	return a:1
    else
	return '' 
    endif
endfunction
						"}}}
" Stubs for User Functions Requiring has('perl') {{{2
    let s:PerlFunc="ShowINC ShowMain UsePerl ColOrder SetCws Banner PinSplit ColSplit"
    let s:start=0
    while 1
	let s:Fun=matchstr(s:PerlFunc, '\w+', s:start)
	if s:Fun == ""
	    break
	else
	    exec 'function!' s:Fun '(...) range | echoerr' s:Fun "requires has('perl') which " v:version/100 "doesn't have | endfunction"
	    let s:start=matchend(s:PerlFunc, '\w+', s:start)
	endif
    endwhile

function! DoubleSpace()	    range	"{{{2

"make sure there is at least one blank line before and after current
"line handles a range
   let cnt     = a:lastline - a:firstline + 1
   echo "cnt:".cnt
   exec "normal ".a:firstline."zz"
   while cnt > 0
     let ln = line(".")
     if ln == 1 || getline(ln-1) !~ "^\s*$" 
	exec "normal O\<Esc>j"
     endif
     if ln == line("$") || getline(ln+1) !~ "^\s*$" 
	exec "normal o\<Esc>j"
     else
	normal j
     endif
     let cnt = cnt - 1
   endwhile
endfunction

function! NewModule() range		"{{{2
"Load Perl Module template, called by au BufRead *.pm
    exec "0r /home/tsnyder/src/templates/PerlModule.templ"
    let mn = input("Module Name?")
    exec "%s/TRS_MODULE_NAME/".mn."/g"
    /^TRS_DISCRIPTION_TEXT
    normal C
endfunction

function! Template(type) range		"{{{2
"Load a function or method template from ~tsnyder/src/templates
 let name   = input(a:type." Name?")
 let file = s:UserPerlBin."/templates/Perl".a:type.".templ" 
 exec "r".file
 exec "'[,']s/TEMPLATE_NAME/".name."/"
 if name == 'AUTOLOAD'
   ?^\(use strict\|package\)
   exec "normal ouse vars qw($AUTOLOAD);\<Esc>"
   /^sub AUTOLOAD
   /my \$self
   exec "normal C$AUTOLOAD =~ /.*::(.*)/;\<CR>my $name = $1;\<CR>$name eq 'DESTROY' and return;\<CR>my $self = $_[0];\<CR>my $sub;"
   exec "/die"
   exec "normal Cif(exists $self->{name}){\<CR>$sub = sub{\<CR>my $self = shift;\<CR>$self->{$name}=shift if @_;\<CR>return $self->{$name};\<CR>};\<CR>}"
   exec "normal oif(defined $sub){\<CR>no strict qw(refs);\<CR>*$AUTOLOAD = $sub;\<CR>goto &$AUTOLOAD;\<CR>use strict;\<CR>}"
   exec "normal ocroak 'Can\\'t locate object method \"'.$name.'\" via package \"'.__PACKAGE__.\<CR>\<TAB>\<TAB>'\" (perhaps you forgot to load \"'.__PACKAGE__.'\"?)';"
   ?^\s*if
   exec "normal O\<CR>#FILL IN THE REST of AUTOLOAD method HERE!!!\<CR>"
 endif
 exec "normal '[/TEMPLATE_DISC\<CR>C"
endfunction

function! UpdateModifiedTag () range	"{{{2
    " Update modification tag inside embedded documentation
    if exists("b:current_syntax") 
	"let s:foldenable=&foldenable
	let s:lazyredraw=&lazyredraw  "force the screen to not be redrawn now to avoid possible jumpiness
	set lazyredraw
	"set nofoldenable
	let s:reg_se=@/
	let s:reg_s=@s
	let s:reg_t=@t
	normal msHmt	    "save cursor and screen position in @s and @t
	if b:current_syntax == 'perl'
	    silent! exec "g/Written: /s/Modified: [a-zA-Z].*/Modified: ".$USER strftime("%d-%b-%y %H:%M")"/i"
	    "TODO am I still pushing one search pattern off the history??
	    call histdel('search', -2)
	elseif b:current_syntax =~? 'vim\|tcsh'
	    "TODO make this use the comment string that is stored in global vim var (see yaks)
	    silent! exec '%s/^\(["#] Last \(Modified\|Changed\=\):\s*\).*/\1'.$USER strftime("%d-%b-%y %H:%M")"/i"
	    call histdel('search', -1)
	endif
	normal 'tzt`s	    "go back to saved cursor and screen position
	let @s=s:reg_s
	let @t=s:reg_t
	"let &foldenable=s:foldenable
	let &lazyredraw=s:lazyredraw
	let @/=s:reg_se
	"unlet s:foldenable s:lazyredraw s:reg_se s:reg_s s:reg_t
	unlet s:lazyredraw s:reg_se s:reg_s s:reg_t
    endif
endfunction

function! ToggleComment()		"{{{2
"Toggle comment for current line using line commenting character
"TODO there is probably a standard way of defining this so I can get rid of w:comStr
"     There is &commentstring
  if getline(".") =~ "^\s*".w:comStrSrch 
    exec "normal :s/^\\(\\s*\\)=w:comStrSrch\<CR>/\\1/\<CR>"
  else 
    exec "normal :s/^/=w:comStrSrch\<CR>/\<CR>" 
  endif
endfunction

function! TermSyntaxColoring() range	"{{{2
"Set up all the coloring so syntax is legible, called by au FileType *
    "Reverse video so colors are easy to read when filetype is detected
    highlight Normal ctermbg=Black ctermfg=LightGrey 
    "Don't use bold text for everything.  That is really hard to read...
    highlight Statement   cterm=NONE
    highlight Constant    cterm=NONE
    highlight Comment     cterm=NONE
    highlight Identifier  cterm=NONE
    highlight Type        cterm=NONE
    highlight Special     cterm=NONE
    "Use dark blue for comments and stuff and use cyan for preProc in terminal
"    highlight Comment ctermfg=4
    highlight PreProc ctermfg=6
endfunction

function! SplitDrop(file) range			"{{{2
    "If there isn't a file in the current buffer, just close it and then drop.
    if bufname("") == ''
	normal :q<CR>
	exec 'drop '.a:file
    else 
	" Use modified tag to trick drop into always splitting new window
	let tmp=&modified 
	let bn=bufnr("") 
	set modified 
	exec 'drop '.a:file
	call setbufvar(bn,"&mod", tmp)
    endif
endfunction

function! <SID>ColorX11RgbTxt() range		"{{{2
    " TODO if I ever care about portability, make it check to make sure we are on X not something
    " else
    if &term != 'builtin_gui'
	echoerr "All X11 colors can only properly be displayed in the GUI, do :gui first!"
	return
    endif
    if !has('perl')
	echoerr "This command requires vim be compiled with perl_interface. It seems to be missing."
	return
    endif
    let colorfile = "/usr/lib/X11/rgb.txt"
    "let colorfile = "/home/tsnyder/rgb.txt"
    if !filereadable(colorfile)
	echoerr "Can't find colorfile:".colorfile
	return
    endif

    silent call SplitDrop(colorfile)

    " save global options and registers
    let s:hidden      = &hidden
    let s:lazyredraw  = &lazyredraw
    let s:more	      = &more
    let s:report      = &report
    let s:shortmess   = &shortmess
    let s:wrapscan    = &wrapscan

    " set global options
    set hidden lazyredraw nomore report=99999 shortmess=aoOstTW nowrapscan

    " set local options
    setlocal bt=nofile "not going to save this stuff back to non-writable file so just don't worry if user makes changes, just don't let them write it
    setlocal noro
    file X11ColorPallet
    "sort the color file by colorname ignoring case
    2,$!/tool/pandora/bin/sort -un -k1,1 -k2,2 -k3,3
    " TODO stopped here !!!! - tsnyder 25-Jul-05 01:40
    " while search("^\v\s*\d{3}\s+\d{3}\s+\d{3}\s+\w+$","W")  
    " won't match colors with spaces but they are all duplicates anyway
    syntax clear
    set iskeyword+=" "
    "perldo  while (/\b(\d{1,2})\b/) { my $j = 's/\b$1\b/'.sprintf("%0.3u",$1).'/'; print "do $j\n";  eval $j } 
    perl <<
	#VIM::Msg("lineNum:".VIM::Eval('line(".")'));
	foreach my $i (2 .. $main::curbuf->Count()){
	    my $line = $main::curbuf->Get($i);
	    $line =~ s/^\s+|\s+$//g;
#	    VIM::Msg( "line:$line");
	    my @spline = split " ", $line, 4;
#	    VIM::Msg( 'spline:'.(join ",",@spline));
	    my $colNr = '#'.sprintf('%2.2x'x3,@spline[0..2]);
	    my $col = $spline[3];
	    $line = 
	    sprintf(('%0.3u 'x3).("\t%s"x6),
		    @spline[0..2],
		    $colNr,
		    $col,
		    $col.'_onWhite',
		    $col.'_onBlack',
		    'WhiteOn_'.$col,
		    'BlackOn_'.$col
		   );
	    my $gn = $col;
#	    VIM::Msg( 'gn:'.$gn);
	    $gn =~ s/\s+/_/g;
#	    VIM::Msg( 'gn:'.$gn);
	    if ($col =~ s/(?<!\\)(?=\s)/\\/g){
#		VIM::Msg( 'hi X11rgb_'.$gn.'_onWhite guifg='.$colNr.' guibg=White');
#		VIM::Msg( 'hi X11rgb_'.$gn.'_onBlack guifg='.$colNr.' guibg=Black');
#		VIM::Msg( 'hi X11rgb_WhiteOn_'.$gn.' guibg='.$colNr.' guifg=White');
#		VIM::Msg( 'hi X11rgb_BlackOn_'.$gn.' guibg='.$colNr.' guifg=Black');
#		VIM::Msg( 'syn keyword X11rgb_'.$gn.'_onWhite '.$col.'_onWhite ');
#		VIM::Msg( 'syn keyword X11rgb_'.$gn.'_onBlack '.$col.'_onBlack ');
#		VIM::Msg( 'syn keyword X11rgb_WhiteOn_'.$gn.' WhiteOn_'.$col);
#		VIM::Msg( 'syn keyword X11rgb_BlackOn_'.$gn.' BlackOn_'.$col);
#		VIM::DoCommand( 'call input("hit enter")');
	    }
	    VIM::DoCommand( 'hi X11rgb_'.$gn.'_onWhite guifg='.$colNr.' guibg=White');
	    VIM::DoCommand( 'hi X11rgb_'.$gn.'_onBlack guifg='.$colNr.' guibg=Black');
	    VIM::DoCommand( 'hi X11rgb_WhiteOn_'.$gn.' guibg='.$colNr.' guifg=White');
	    VIM::DoCommand( 'hi X11rgb_BlackOn_'.$gn.' guibg='.$colNr.' guifg=Black');
	    VIM::DoCommand( 'syn match X11rgb_'.$gn.'_onWhite /\<'.$col.'_onWhite\>/');
	    VIM::DoCommand( 'syn match X11rgb_'.$gn.'_onBlack /\<'.$col.'_onBlack\>/');
	    VIM::DoCommand( 'syn match X11rgb_WhiteOn_'.$gn.' /\<WhiteOn_'.$col.'\>/');
	    VIM::DoCommand( 'syn match X11rgb_BlackOn_'.$gn.' /\<BlackOn_'.$col.'\>/');
	    $main::curbuf->Set($i,$line);
	}
.
    normal 1G
    nohlsearch
    syntax sync minlines=1

    " restore global options and registers
    let &hidden      = s:hidden
    let &lazyredraw  = s:lazyredraw
    let &more	     = s:more
    let &report	     = s:report
    let &shortmess   = s:shortmess
    let &wrapscan    = s:wrapscan

    echoe "Don't have the coloring exactly figured out.  Seems I run out of space to allocate new colors"

endfunction

						"}}}
function! <SID>DiffExpr (...) range		"{{{2
    " Getting options to diff into &diffexpr directly is a pain
    " Having a level of indirection to a function makes it better
    " Making it a user command is even better because you don't 
    " have to type as much this funciton is meant to be called 
    " by :command DiffOpts in setting &diffexpr

    if &diffopt =~ "icase" || &diffopt =~ "iwhite"
	echohl WarningMsg
	echom "'diffopt' contains icase or iwhite while executing user :DiffExpr"
	echom "user :DiffExpr ignores 'diffopt' icase and iwhite. See ':help :DiffExpr' for more info."
	echohl None
    endif

    "let cmd = exists(g:diff_path) ? g:diff_path : 'diff'
    if a:0 > 0
       let i = 1
       if executable(a:1)
	   let cmd = a:1
	   let i = i+1
       else
	   let diff_path = globpath(substitute($PATH,':',',','g'), a:1)
	   if diff_path == ''
	       let cmd = 'diff'
	   else
	       while diff_path != ''
		   if executable(matchstr(diff_path,'\%^.*'))
		       let cmd = matchstr(diff_path,'\%^.*')
		       let i = i+1
		       break
		   else
		       let diff_path = substitute(diff_path, '\%^.*\n', '', '')
		   endif
	       endwhile
	       if !exists(cmd)
		   echohl WarningMsg
		   echom "Unable to find executable ".a:1." in $PATH, using 'diff'"
		   echohl None
		   let cmd = 'diff'
	       endif
	   endif
       endif
       let quote = 0
       while i <= a:0
	   if a:{i} =~ '^-'
	       if quote == 1
		   let cmd = cmd."'"
		   let quote = 0
	       endif
	       let cmd = cmd." ".a:{i}
	   else 
	       if quote == 0
		   let cmd = cmd." '".a:{i}
		   let quote = 1
	       else 
		   let cmd = cmd." ".a:{i}
	       endif
	   endif
	   let i = i + 1
       endwhile
       if quote == 1
	   let cmd = cmd."'"
       endif
    else
       let cmd = 'diff'
    endif
    echom "!".cmd." ".v:fname_in.' '.v:fname_new.' '.&shellredir.' '.v:fname_out
    exec "!".cmd." ".v:fname_in.' '.v:fname_new.' '.&shellredir.' '.v:fname_out
endfunction
						"}}}

" User Abbreviations		{{{1
" ==================
" :sfind is a real command already
 

" User Commands			{{{1
" =============

" Reload ~/.vimrc		{{{2
command! Source execute $VIMINIT
" Provide better method to give diffexpr arguments
command! -nargs=+ DiffOpts set diffexpr=<SID>DiffOpts(<f-args>)
" Open a window that displays all of the current color hilighting {{{2
" I hacked it so the configuration values for all the colors
" would be shown instead of being grepped out - tsnyder 22-Jul-05
command! HilightColors source /home/tsnyder/.vim/syntax/hitest.vim

"Open a window that displays /usr/lib/X11/rgb.txt with color names fg in each color {{{2
command! ColorPallet call <SID>ColorX11RgbTxt()

" Trick drop into always splitting a new window		{{{2
command! -nargs=1 -complete=file Sdrop call SplitDrop(<f-args>)
" Provide easier mechanism for configuring vimdiff {{{2
command! -nargs=+ ConfigDiff let &diffexpr = '<SID>DiffExpr(<f-args>)'

						    "}}}
"command! -nargs=+ -complete=file New call New(<f-args>)

" User Mappings			{{{1
" =============


" Use <colon>drop for gf instead of <colon>e		{{{2
map gf :drop <cfile><CR>
														  
" Use modified tag to trick drop into always splitting new window for found file in gf 		{{{2
"map gsf :let tmp=&modified <Bar> let bn=bufnr("") <Bar> set modified <Bar> drop <cfile> <Bar> call setbufvar(bn,"&mod", tmp)<CR>
map gsf :Sdrop <cfile><CR>
														  
"Reinitialize Perl Module -- doesn't work quite right  {{{2
if has('perl') && filereadable(s:UserPerlBin.'/Tsnyder/VIM.pm')
    map rs  :call UsePerl()<CR>
endif

" Perl/Programming Macros -- Begin with  "{{{2
" ============================================
"
"insert function/method template Based on Current syntax. Currently only Perl is supported - tsnyder 10-Jul-05"{{{3
map f    :call Template('Function')<CR> 
map s    :call Template('Function')<CR> 
map m    :call Template('Method')<CR>

" Insert Code for Psr			{{{3
map psr  orequire /u/k7debug/dev/lib/perl/Psr.pm new Psr(root =>$HASHREF_HERE)->show if($ARGV{'debug'} and $CHECK_DATA);<Esc>?HASHREF_HERE<CR>cw

"insert a "=over 4 =back" block in pod	{{{3
map <silent> po   o=over 4<CR>=item *<CR>TRSMARK<CR>=back<Esc>:?^=over<CR>:.,/^=back/call DoubleSpace()<CR>:?^TRSMARK<CR>D

"insert a arg =item in pod		{{{3
map <silent> pa   o=item $_[0] : [0<Bar>1<Bar><string>] (optional) (default:0)<CR>TRSMARK<Esc>:?^=item<CR>:.,/^/call DoubleSpace()<CR>:?^TRSMARK<CR>C

" Komment(sic) Macros -- Begin with 	{{{2
" ====================================
"
"user date and time appended at current cursor location
imap ut     - =$USER<CR> =strftime("%d-%b-%y %H:%M")<CR>
 map ut   a - =$USER<CR> =strftime("%d-%b-%y %H:%M")<CR><ESC>? - <CR>
"user date appended at current cursor location
imap ud     - =$USER<CR> =strftime("%d-%b-%y")<CR>
 map ud   a - =$USER<CR> =strftime("%d-%b-%y")<CR><ESC>? - <CR>
"date and time appended at current cursor location
imap t     - =strftime("%d-%b-%y %H:%M")<CR>
 map t   a - =strftime("%d-%b-%y %H:%M")<CR><ESC>? - <CR>
"date appended at current cursor location
imap d     =strftime("%d-%b-%y")<CR>
 map d   a =strftime("%d-%b-%y")<CR><ESC>

"Enter command editor window with <C-Space> instead of q<colon> {{{2
"doesn't work for xterm because <C-Space> is mapped to something...
 map <C-Space>      q:

"cmap <C-Space> <C-c>q: "this is done by 'cedit' option (default: )

"}}}
map <F5> :call ToggleComment()<CR>
"Put each seperate pin statement of a GL Verilog instance on it's own line preserving indent?? "{{{2
"I'm not sure which indenting I should be using.  Need to look into that more at some point when I'm bored... ha!
map  <F7> :set smartindent<CR>zz:s/\(\.\\|);\)/\r\t\1/g<CR>k<S-V>?(\s*$<CR>j>><S-V>/);<CR>><ESC>..../);<CR>j:set nosmartindent<CR>
"map <F7> :s/\(\.\\|);\)/\r\1/g<CR>                                                                

" sort buffernames for FpuOpc for placing in buffers mode  {{{2
map <F8> :!sort -k 1.15,1.16n -k 1.23n <CR>                                             

" Enclose visually selected text in grouping characters	   {{{2

"parens						{{{3
vmap <Space>(  <Esc>`<i(<Esc>`>la)<Esc>
vmap <Space>)  <Esc>`<i(<Esc>`>la)<Esc>                                                                                      
" brackets					{{{3
vmap <Space>[  <Esc>`<i[<Esc>`>la]<Esc>
vmap <Space>]  <Esc>`<i[<Esc>`>la]<Esc>                                                                                      
" braces					{{{3
vmap <Space>{  <Esc>`<i{<Esc>`>la}<Esc>
vmap <Space>}  <Esc>`<i{<Esc>`>la}<Esc>                                                                                      
" angle brackets				{{{3
vmap <Space><  <Esc>`<i<<Esc>`>la><Esc>
vmap <Space>>  <Esc>`<i<<Esc>`>la><Esc>                                                                                      
" single quotes					{{{3
vmap <Space>'   <Esc>`<i'<Esc>`>la'<Esc>                                                                                      
" escaped single quotes				{{{3
vmap <Space>\'  <Esc>`<i\'<Esc>`>2la\'<Esc>                                                                                      
" double quotes					{{{3
vmap <Space>"   <Esc>`<i"<Esc>`>la"<Esc>                                                                                      
" escaped double quotes				{{{3
vmap <Space>\"  <Esc>`<i\"<Esc>`>2la\"<Esc>                                                                                      
" Make / do search for visually selected text instead of expanding selection to search match {{{3
vmap / y/<C-R>"<CR>
						"}}}1
ConfigDiff diff

" User Auto-Commands				{{{1                                                             
" ==================

" If file passed to vi does not exist, :find it in the path                                                                                      
"autocmd BufReadCmd * call ReadFallBackPath(expand("<afile>"))
                                                                                      
"Debug unloading of setlocal but not syntax when jumping to another file with :tag or :edit etc
"autocmd BufRead * echoerr "did_filetype() returns:".did_filetype()

"Set AMD RTL extension filetypes to verilog
autocmd BufRead *.d,*.rtl,*.rtl.v set filetype=verilog

"Default comment string for unknown filetypes is two slashes
" TODO need to use the comment string that vim keeps internally, see yaks
autocmd BufReadPre * let w:comStr = '//'
autocmd BufReadPre * let w:comStrLen = 2
autocmd BufReadPre * let w:comStrSrch = '\/\/'

" Detect the filetype after loading file with :read or equivalent
au FileReadPost * syntax enable

" Always use the gui if filetype has been detected
" not as necessary now that I know how to set up highlight coloring
"au FileType * exec "gui"

" Force cterm to reverse video so coloring is readable
au FileType * call TermSyntaxColoring()
au FileType * set foldcolumn=2


" Set up comment toggleing macros
au FileType * let w:comStr = (expand("<amatch>") ==? "perl" || expand("<amatch>") ==? "conf") ? '#' : (expand("<amatch>") ==? "vim") ? '"' : '//'
au FileType * let w:comStrLen = strlen(substitute(w:comStr, ".", "x", "g"))
au FileType * let w:comStrSrch = substitute(w:comStr, '\/', '\\/', "g") 

" Create a syntax group for things that I always want to add to Todo
"au Syntax * match Todo /?\{3}.*?\{3}\|\<UserTodo\>\|\<Todo\>\|\<ToDo\>\|\<NOTE\>\|\<Note\>/
" Create a syntax group for things that I always want to add to Todo
"au Syntax * match Underlined /!\{3}.*!\{3}/
"
"I worked on getting some regexes that would let me process the :sy list output to get the contains
"argument for comments
"redir @a
"silent sy list perlComment
"redir END
"let @a =  substitute(@a,'\n\s*links.*','','g')
"let @a =  substitute(@a,'\_s\{-}--- Syntax items ---\n','','g')

au BufNewFile * let s:foundInPath = 0

" If invoked with link that matches, 'fg\=vi\=', search for file in 'path' if it doesn't exist
au BufNewFile * nested if v:progname =~? 'fg\=vi\=' | let s:foundInPath=1 | try | find <afile> | catch 'Can.t find file' |  let s:foundInPath=0 | endtry | endif
au BufNewFile * nested if v:progname =~? 'fgvi\=' | gui | endif
"au BufNewFile * nested if v:progname =~? 'fg\=vi\=' | try | find <afile> | catch 'Can.t find file' | endtry | endif

"turn the visual bell off inside vim
"turns the visual bell on and sets the loaded termcap bell lentgh to 0
au GUIEnter * set visualbell t_vb=


" Perl Template loading Autocommands that propbably should be moved into {{{2
" But now that there is the foundInPath hack to make the perl templates cooperate with fvi and fgv...
au BufNewFile *.p[lm] if s:foundInPath == 0
au BufNewFile *.pm    call NewModule()
au BufNewFile *.pl    silent exec "0r ".s:UserPerlBin."/templates/PerlScript.templ"
au BufNewFile *.p[lm] silent exec '%s/Written: \w\+ DATE/Written: '.$USER strftime("%d-%b-%y %H:%M").'  Modified: '.$USER '/'
au BufNewFile *.p[lm] silent exec '%s/TEMPLATE_FILE_NAME/'.escape(expand('<afile>:t'),'/').'/'
au BufNewFile *.p[lm] let s:foldenable = &foldenable | set nofoldenable | silent exec "normal /ONELINE\<CR>" | let &foldenable = s:foldenable | unlet s:foldenable | normal zo
au BufNewFile *.p[lm] endif 

"}}}

" Update Modified: comment with current time when writing a file
au BufWrite *   call UpdateModifiedTag()
															    
" Perl Interface Init		    {{{1
" See Also: 
"	'perldoc ~tsnyder/bin/Tsnyder/VIM.pm'
"	:help :perl
" =========================================

if has('perl') && filereadable(s:UserPerlBin.'/Tsnyder/VIM.pm')

    function! ShowINC (...) range
	perl require Data::Dumper; $foo = Data::Dumper::DumperX(\%INC);
	if a:0
	    perl $main::curbuf->Append(scalar(VIM::Eval('line(".")')), (split /\n/, $foo))

	else 
	    perl VIM::Msg($foo);
	endif
    endfunction

    function! ShowMain () range
	perl require Data::Dumper; VIM::Msg(Data::Dumper::DumperX(\%main::))
    endfunction

    function! UsePerl () range
	perl for my $tag (grep /Tsnyder|Banner/, keys %INC) { delete $INC{$tag} }
	":call ShowINC()
	":call ShowMain()
	perl use lib (VIM::Eval('s:UserPerlBin')); use Tsnyder::VIM; $main::tsnyder = new Tsnyder::VIM();
    endfunction

    call UsePerl()

    function! ColOrder (...) range
	perl $main::tsnyder->ColOrder();
    endfunction

    function! SetCws (...) range
	perl $main::tsnyder->SetCws();
    endfunction

    function! Banner (...) range
	perl $main::tsnyder->Banner();
    endfunction

    function! PinSplit (...) range
	perl $main::tsnyder->ColSplit(undef, '(.*)/(.*)');
    endfunction

    function! ColSplit (...) range
	perl $main::tsnyder->ColSplit();
    endfunction

endif

" Source $HOME/.vimrc if it exists	    {{{1
if filereadable($HOME.'/.vimrc')
    source $HOME/.vimrc
endif

" Trash			    {{{1
" =====

" Enable editing of gzipped files.  This comes straight from the vim
" distribution and it served me well.
"   uncompress them after reading
"   compress them before writing, undone after writing
"   binary mode is needed when writing gzipped files

"autocmd BufRead *.gz set bin|%!gunzip
"autocmd BufRead *.gz set nobin
"autocmd BufWritePre *.gz %!gzip
"autocmd BufWritePre *.gz set bin
"autocmd BufWritePost *.gz undo|set nobin
"autocmd FileReadPost *.gz set bin|'[,']!gunzip
"autocmd FileReadPost *.gz set nobin
"" and for compressed files (read only)
"autocmd BufRead *.Z set bin|%!gunzip
"autocmd BufRead *.Z set nobin
"autocmd FileReadPost *.Z set bin|'[,']!gunzip
"autocmd FileReadPost *.Z set nobin
""   handle bzip2 files
"autocmd BufRead *.bz2 set bin|%!bunzip2
"autocmd BufRead *.bz2 set nobin
"autocmd BufWritePre *.bz2 %!bzip2
"autocmd BufWritePre *.bz2 set bin
"autocmd BufWritePost *.bz2 undo|set nobin
"autocmd FileReadPost *.bz2 set bin|'[,']!bunzip2
"autocmd FileReadPost *.bz2 set nobin


"Other random crap that was in the original vimrc that I don't want to delete but I'm getting out of the way.
"map 2-3 /{ma:set sw=1>%`a1l%1h1x%_1h1x:set sw=3j
"map 2-4 /{ma:set sw=2>%`a2l%2h2x%_2h2x:set sw=4j
"map  /{jmak%kmb:'a,'b s/^  /    'ak
"map  EBdWWhp
"map  ddp
"map 3 :set ts=3 sw=3 
"map 8 :set ts=8 sw=8 
"map 4 :set ts=4 sw=4 
"map  :wq

"map ind :ia ind \indent
"map beg :ia beg \begin{
"map end :ia en \end{
"map nl :ia nl \\
"map em :ia em {\em
"map bf :ia bf {\bf
"map itl :ia itl {\it
"map itm :ia itm \item
"map sec :ia sec \section{
"map sub :ia sub \subsection{
"map ft :ia ft \footnote{
"map latex indemnlbfitlbegendsecsubftitm
"map c :set smartindent:set cindent
"map   /Methodddko                                                                                      "}}}
